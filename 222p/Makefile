# 222.place Matchmaking Platform Makefile
# Convenient commands for development and deployment

.PHONY: help up down logs build clean test seed backup restore

# Default target
.DEFAULT_GOAL := help

# Variables
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := 222place

help: ## Show this help message
	@echo "222.place Matchmaking Platform Commands"
	@echo "======================================"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

up: ## Start all services
	@echo "üöÄ Starting 222.place services..."
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "‚úÖ Services started! Check status with 'make status'"
	@echo "üåê Web app: http://localhost:3000"
	@echo "üîß API: http://localhost:5000"
	@echo "üìä Grafana: http://localhost:3001 (admin/admin)"

down: ## Stop all services
	@echo "üõë Stopping 222.place services..."
	docker-compose -f $(COMPOSE_FILE) down

build: ## Build all services
	@echo "üî® Building 222.place services..."
	docker-compose -f $(COMPOSE_FILE) build

rebuild: ## Rebuild and restart all services
	@echo "üîÑ Rebuilding and restarting services..."
	docker-compose -f $(COMPOSE_FILE) down
	docker-compose -f $(COMPOSE_FILE) build --no-cache
	docker-compose -f $(COMPOSE_FILE) up -d

logs: ## Show logs for all services
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-api: ## Show API logs
	docker-compose -f $(COMPOSE_FILE) logs -f api

logs-web: ## Show web logs
	docker-compose -f $(COMPOSE_FILE) logs -f web

logs-db: ## Show database logs
	docker-compose -f $(COMPOSE_FILE) logs -f db

status: ## Show status of all services
	@echo "üìä Service Status:"
	docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "üîç Health Checks:"
	@curl -s http://localhost:5000/health | jq . 2>/dev/null || echo "API: Not responding"
	@curl -s http://localhost:3000/api/health | jq . 2>/dev/null || echo "Web: Not responding"

shell-api: ## Open shell in API container
	docker-compose -f $(COMPOSE_FILE) exec api bash

shell-db: ## Open PostgreSQL shell
	docker-compose -f $(COMPOSE_FILE) exec db psql -U postgres -d matchmaking_db

seed: ## Seed database with sample data
	@echo "üå± Seeding database with sample data..."
	docker-compose -f $(COMPOSE_FILE) exec api python -c "
	import asyncio
	from seed_data import seed_database
	asyncio.run(seed_database())
	"
	@echo "‚úÖ Database seeded successfully!"

test: ## Run smoke tests
	@echo "üß™ Running smoke tests..."
	@chmod +x scripts/smoke_test.sh
	@./scripts/smoke_test.sh

test-api: ## Run API tests
	docker-compose -f $(COMPOSE_FILE) exec api pytest tests/ -v

clean: ## Clean up containers, networks, and volumes
	@echo "üßπ Cleaning up..."
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f
	@echo "‚úÖ Cleanup complete!"

clean-all: ## Clean everything including images
	@echo "üßπ Deep cleaning (WARNING: removes all data)..."
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans --rmi all
	docker system prune -af
	@echo "‚úÖ Deep cleanup complete!"

backup: ## Backup database
	@echo "üíæ Creating database backup..."
	@mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec -T db pg_dump -U postgres matchmaking_db > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup created in backups/"

restore: ## Restore database from backup (usage: make restore BACKUP=backup_file.sql)
	@if [ -z "$(BACKUP)" ]; then \
		echo "‚ùå Please specify backup file: make restore BACKUP=backup_file.sql"; \
		exit 1; \
	fi
	@echo "üì• Restoring database from $(BACKUP)..."
	docker-compose -f $(COMPOSE_FILE) exec -T db psql -U postgres -d matchmaking_db < $(BACKUP)
	@echo "‚úÖ Database restored!"

dev: ## Start development environment
	@echo "üõ†Ô∏è Starting development environment..."
	docker-compose -f $(COMPOSE_FILE) up -d db redis qdrant
	@echo "‚úÖ Development services started!"
	@echo "Run 'cd api && python app.py' for API development"
	@echo "Run 'cd web && npm run dev' for web development"

install: ## Install development dependencies
	@echo "üì¶ Installing dependencies..."
	@if [ -f "api/requirements.txt" ]; then \
		echo "Installing Python dependencies..."; \
		cd api && pip install -r requirements.txt; \
	fi
	@if [ -f "web/package.json" ]; then \
		echo "Installing Node.js dependencies..."; \
		cd web && npm install; \
	fi
	@echo "‚úÖ Dependencies installed!"

format: ## Format code
	@echo "üé® Formatting code..."
	@if command -v black >/dev/null 2>&1; then \
		black api/; \
	else \
		echo "Black not installed, skipping Python formatting"; \
	fi
	@if [ -f "web/package.json" ]; then \
		cd web && npm run lint --if-present; \
	fi

setup: ## Initial setup (run once)
	@echo "üîß Initial setup..."
	@if [ ! -f ".env" ]; then \
		cp .env.example .env; \
		echo "üìù Created .env file from .env.example"; \
		echo "‚ö†Ô∏è  Please edit .env with your configuration"; \
	fi
	@mkdir -p scripts backups logs
	@echo "‚úÖ Setup complete!"

ssl: ## Generate self-signed SSL certificates
	@echo "üîí Generating SSL certificates..."
	@mkdir -p certs
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
		-keyout certs/222place.key \
		-out certs/222place.crt \
		-subj "/C=US/ST=Local/L=Local/O=222place/CN=localhost"
	@echo "‚úÖ SSL certificates created in certs/"

monitor: ## Open monitoring dashboard
	@echo "üìä Opening monitoring dashboard..."
	@if command -v open >/dev/null 2>&1; then \
		open http://localhost:3001; \
	elif command -v xdg-open >/dev/null 2>&1; then \
		xdg-open http://localhost:3001; \
	else \
		echo "Visit http://localhost:3001 for Grafana dashboard"; \
	fi

# Development helpers
api-dev: ## Start API in development mode
	cd api && python app.py

web-dev: ## Start web in development mode  
	cd web && npm run dev

# Update helpers
update: ## Pull latest images
	docker-compose -f $(COMPOSE_FILE) pull

upgrade: ## Upgrade and restart services
	@echo "‚¨ÜÔ∏è Upgrading services..."
	make update
	make down
	make up
	@echo "‚úÖ Upgrade complete!"