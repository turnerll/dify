# Simplified 222.place Docker Compose
# Can run independently or integrated with Dify

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-222place123}
      POSTGRES_DB: ${DB_DATABASE:-place222}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d place222"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-222place123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-222place123}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Simple Python API server
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:222place123@db:5432/place222
      - REDIS_URL=redis://:222place123@redis:6379/0
      - SECRET_KEY=222place-super-secret-key-2024
      - DEBUG=true
      - FLASK_ENV=development
    ports:
      - "5001:5001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python app.py

  # Simple web server for frontend
  web:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api

volumes:
  db_data:
  redis_data:

networks:
  default:
    name: place222_network